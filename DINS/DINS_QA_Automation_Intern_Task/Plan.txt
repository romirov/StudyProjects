DINS

Тестовое веб-приложение телефонной книги, написанное на Java:

написать полный план тестирования приложения в текстовом документе (НЕ следует писать полные тест-кейсы с шагами или автоматизировать каждый тест, достаточно короткого описания для каждого теста)

создать 4 автоматических теста (использовать Java) для этого приложения, предоставить исходный код этих тестов: 2 любых положительных и 2 отрицательных теста
должна быть возможность создать отчет для запуска тестов

прикрепите инструкцию как запускать ваши тесты

(необязательно) отчет об ошибке: краткое описание каждой ошибки будет плюсом

Найдите приложение, его описание и инструкцию по запуску в архиве.


# Phone Book

Phone Book is a server part (no UI) of an application for a management of users and their phone books. It a REST API application based on Spring framework.
#### Functional ####
1. User (first name, last name)
   + Add a user
   + Remove a user
   + Change a user
   + Find users by name
   + Get a list of all users
2. Contact (phone number, first name, last name, email)
   + Add a contact
   + Remove a contact
   + Change a contact
   + Find contacts in a user's phone book by a phone number or contact's ID
   + Get a list of all user's contacts
#### Application launch ####
You'll need Java 11 or higher.

Execute a command:
 ```
  java -jar phonebook.jar
 ```
#### Default application parameters #### 
Host: `localhost`
Port: `8080`

#### Application API ####
API entrypoint:
 ```
http://localhost:8080/
 ```

Swagger specification:
 ```
http://localhost:8080/phonebook-api.html
 ```




>>> java -jar TestTree.jar

План тестирования приложения:
 Функциональное тестирование. 
* Протестировать валидацию всех обязательных полей 
* Убедиться, что знак звездочки отображается у всех обязательных полей 
* Убедиться, что система не отображает окно ошибки при незаполненных необязательных полях. 
* Убедиться, что високосные коды корректно валидируются и не вызывают ошибок в расчетах. 
* Протестировать числовые поля: они не должны принимать буквы, в этом случае должно отображаться соответствующее сообщение об ошибке. 
* Протестировать отрицательные значения в числовых полях, если они разрешены.
* Протестировать, что деление на ноль верно обсчитывается. 
* Протестировать максимальную длину каждого поля, чтобы убедиться, что данные не обрезаются.
* Убедиться, что подтверждающее сообщение отображается для операций обновления и удаления.
* Протестировать все поля ввода на спецсимволы. 
* Протестировать функциональность тайм-аута. 
* Протестировать функциональность сортировки.
* Протестировать добавление/удаление/изменение пользователей
* Протестировать вывод всех пользователей
* Протестировать поиск пользователей по части ключевого слова/ключевому слову/цифре/спец символу
* Протестировать добавление/удаление/изменение контактов пользователей
* Протестировать поиск контактов по номеру телефона или id
* Протестировать вывод всех контактов
 Тестирование баз данных. 
* Проверить название базы данных: оно должно совпадать со спецификацией. 
* Проверить таблицы, колонки, типы колонок и значения по умолчанию: все это должно совпадать со спецификацией. 
* Проверить, позволяет ли колонка значение null. 
* Проверить первичный и внешний ключ каждой таблицы. 
* Проверить процедуры хранения.
* Протестировать, установлена ли процедура хранения. 
* Проверить название процедуры хранения. 
* Проверить названия параметров, их типы и количество. 
* Проверить, обязательны параметры или нет. 
* Проверить процедуру хранения, удалив некоторые параметры. 
* Проверить базу данных, если на выходе ноль – записи с нулем должны быть задействованы. 
* Проверить процедуру хранения, задав простые SQL-запросы. 
* Убедиться, что процедура возвращает значения. 
* Проверить процедуру вводом тестовых данных. 
* Проверить поведение каждого флага в таблице. 
* Убедиться, что данные правильно сохраняются в базе данных после каждого ввода. 
* Проверить данные при каждой операции обновления, удаления и вставки. 
* Проверить длину каждого поля. Длина на бэкэнде и фронтэнде должны совпадать. 
* Проверить названия баз данных QA, UAT и прода. Имена должны быть уникальными. 
* Проверить зашифрованные данные в базе.
* Проверить размер базы и время отклика на каждый запрос. 
* Проверить данные, отображающиеся на фронтэнде, и убедитесь, что они совпадают с бэкэндом. 
* Проверить целостность данных, вводя невалидные значения в базу. 
* Проверить триггеры.
 Тестирование безопасности. 
*  Убедиться, что если какая-либо функциональность не работает, система не отображает информацию о приложении, сервере или базе данных. Вместо этого отображается соответствующее сообщение об ошибке. 
* Проверить приложение на SQL-инъекции. 
* Проверить права пользователей и их роли. К примеру, кандидат не должен быть способен получить доступ к странице администратора. 
* Убедиться, что важные операции пишутся в логи, и информацию можно отследить. 
* Убедиться, что значения сессий отображаются в адресной строке в зашифрованном виде.
* Проверить приложение на устойчивость к брутфорс-атакам.
 Тестирование производительности.
* Протестировать нагрузку на сервер
* Протестировать имитацию количества пользователей при обращении к серверному приложению
* Протестировать нагрузку на БД
* Протестировать стабильность работы серверного приложения
* Протестировать скорость выполнения запросов к БД
* Протестировать скорость интернета
* Протестировать корректные сообщения об ошибках
* Протестировать восстановление данных / системы
